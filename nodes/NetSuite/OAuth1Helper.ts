import { debuglog } from 'util';
import { IDataObject } from 'n8n-workflow';

const debug = debuglog('n8n-nodes-netsuite:oauth1');

export interface IOAuth1Options {
	consumerKey: string;
	consumerSecret: string;
	tokenKey: string;
	tokenSecret: string;
	accountId: string;
}

/**
 * Helper class for OAuth 1.0a authentication
 */
export class OAuth1Helper {
	private consumerKey: string;
	// These variables are stored for future signature implementation
	// but not currently used in the authorization header generation
	// @ts-ignore
	private consumerSecret = '';
	private tokenKey: string;
	// @ts-ignore
	private tokenSecret = '';
	private accountId: string;
	private nonce = ''; // Initialize with empty string
	private timestamp = ''; // Initialize with empty string

	constructor(options: IOAuth1Options) {
		this.consumerKey = options.consumerKey;
		this.consumerSecret = options.consumerSecret;
		this.tokenKey = options.tokenKey;
		this.tokenSecret = options.tokenSecret;
		this.accountId = options.accountId;
		
		// Generate initial nonce and timestamp
		this.refreshAuthParams();
	}

	/**
	 * Refresh authentication parameters for each session
	 * NetSuite requires fresh nonce and timestamp for each request
	 */
	public refreshAuthParams() {
		// Generate a random nonce
		this.nonce = Math.random().toString(36).substring(2, 15) + 
			Math.random().toString(36).substring(2, 15);
		
		// Set current timestamp in seconds
		this.timestamp = Math.floor(Date.now() / 1000).toString();
		
		debug('Generated new OAuth1 params', { 
			nonce: this.nonce, 
			timestamp: this.timestamp 
		});
	}

	/**
	 * Get the authorization headers for the request
	 */
	public getAuthorizationHeaders(): IDataObject {
		// Always refresh auth params before generating headers
		this.refreshAuthParams();
		
		debug('Generating OAuth1 headers with', {
			consumerKey: this.consumerKey,
			tokenKey: this.tokenKey,
			nonce: this.nonce,
			timestamp: this.timestamp
		});
		
		// Format the OAuth header value
		// Note: The signature is generated by the @fye/netsuite-rest-api library
		// We're just providing the necessary parameters for it to generate the signature
		const authHeaderValue = 'OAuth ' + [
			`realm="${this.accountId}"`,
			`oauth_consumer_key="${this.consumerKey}"`,
			`oauth_token="${this.tokenKey}"`,
			`oauth_signature_method="HMAC-SHA256"`,
			`oauth_timestamp="${this.timestamp}"`,
			`oauth_nonce="${this.nonce}"`,
			`oauth_version="1.0"`
		].join(',');
		
		return {
			Authorization: authHeaderValue
		};
	}
}
